#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

int shared_data = 0;
pthread_mutex_t mutex;

void* thread1_write(void* arg) {
    for (int i = 1; i <= 5; i++) {
        pthread_mutex_lock(&mutex);
        shared_data = i * 10;
        printf("Thread 1 wrote: %d\n", shared_data);
        pthread_mutex_unlock(&mutex);
        sleep(1);
    }
    return NULL;
}

void* thread2_read(void* arg) {
    for (int i = 0; i < 5; i++) {
        sleep(1);
        pthread_mutex_lock(&mutex);
        printf("Thread 2 read: %d\n", shared_data);
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;
    
    pthread_mutex_init(&mutex, NULL);
    
    pthread_create(&t1, NULL, thread1_write, NULL);
    pthread_create(&t2, NULL, thread2_read, NULL);
    
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    
    pthread_mutex_destroy(&mutex);
    
    return 0;
}
